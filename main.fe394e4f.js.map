{"version":3,"sources":["scripts/main.js"],"names":["startButton","document","querySelector","insertAdjacentHTML","restartButton","messageStart","messageLose","messageWin","fieldCells","querySelectorAll","scoreSpan","getRandomCellValue","Math","floor","random","getFreeRandomCell","freeCells","filter","el","classList","length","fillNewCell","cell","value","textContent","add","toggleHidden","elements","forEach","element","toggle","addEventListener","handleMove","map","item","className","setScore","setProperClass","changeValues","line","valA","valB","mult","temp","move","start","endX","endY","step","stepX","stepY","x","i","push","moveLine","a","b","y","collapseLine","equalCount","e","prevState","getFieldState","key","currState","checkWin","checkStateChange","checkEmptyCells","removeEventListener","prev","curr","some"],"mappings":"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","file":"main.fe394e4f.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst startButton = document.querySelector('.start');\n\nstartButton.insertAdjacentHTML('afterend', `\n  <button class=\"button restart hidden\">Reset</button>\n  `);\n\nconst restartButton = document.querySelector('.restart');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst fieldCells = document.querySelectorAll('.field-cell');\nconst scoreSpan = document.querySelector('.game-score');\n\nconst getRandomCellValue = () => {\n  return Math.floor(Math.random() * 10) < 9 ? 2 : 4;\n};\n\nconst getFreeRandomCell = () => {\n  const freeCells = [...fieldCells].filter(el => el.classList.length === 1);\n  const randomIndex = Math.floor(Math.random() * freeCells.length);\n\n  return freeCells[randomIndex];\n};\n\nconst fillNewCell = () => {\n  const cell = getFreeRandomCell();\n  const value = getRandomCellValue();\n\n  cell.textContent = value;\n  cell.classList.add(`field-cell--${value}`);\n};\n\nconst toggleHidden = (...elements) => {\n  elements.forEach(element => {\n    element.classList.toggle('hidden');\n  }); ;\n};\n\nstartButton.addEventListener('click', () => {\n  fillNewCell();\n  fillNewCell();\n  toggleHidden(startButton, restartButton, messageStart);\n  document.addEventListener('keydown', handleMove);\n});\n\nrestartButton.addEventListener('click', () => {\n  [...fieldCells].map(item => {\n    item.textContent = '';\n    item.className = 'field-cell';\n  });\n  toggleHidden(startButton, restartButton, messageStart, messageLose);\n  setScore(0);\n  document.addEventListener('keydown', handleMove);\n});\n\nconst setProperClass = (cell) => {\n  if (cell.textContent) {\n    cell.className = `field-cell field-cell--${cell.textContent}`;\n\n    return;\n  }\n\n  cell.className = `field-cell`;\n};\n\nconst changeValues = (line, valA, valB, mult = 0) => {\n  let temp = line[valA + valB].textContent;\n\n  if (mult) {\n    temp *= 2;\n  }\n\n  line[valA].textContent = temp;\n  setProperClass(line[valA]);\n  line[valA + valB].textContent = '';\n  setProperClass(line[valA + valB]);\n};\n\nconst move = (start, endX, endY, step, stepX, stepY) => {\n  for (let x = 0; x < endY; x += step) {\n    const line = [];\n\n    for (let i = 0 + x; i < fieldCells.length; i += stepY) {\n      if (line.length < 4) {\n        line.push(fieldCells[i]);\n      }\n    }\n\n    const moveLine = (a = start, b = stepX) => {\n      for (let i = a; i !== endX; i += b) {\n        if (!line[i].textContent) {\n          changeValues(line, i, b);\n        }\n\n        if (line[i].textContent === line[i + b].textContent\n           && line[i].textContent) {\n          setProperClass(line[i]);\n        }\n      };\n    };\n\n    for (let y = 0; y < 3; y++) {\n      moveLine();\n    };\n\n    const collapseLine = (i, b) => {\n      let equalCount = 0;\n\n      if (line[i].textContent === line[i + b].textContent\n        && !!line[i].textContent) {\n        equalCount++;\n        changeValues(line, i, b, 2);\n        setScore(+scoreSpan.textContent + +line[i].textContent * 2);\n      }\n\n      return equalCount;\n    };\n\n    for (let i = start; i !== endX; i += stepX) {\n      if (collapseLine(i, stepX)) {\n        moveLine(i, stepX);\n      };\n    };\n  }\n};\n\nconst handleMove = (e) => {\n  const prevState = getFieldState();\n\n  if (e.key === 'ArrowDown') {\n    move(3, 0, 4, 1, -1, 4);\n  };\n\n  if (e.key === 'ArrowUp') {\n    move(0, 3, 4, 1, 1, 4);\n  }\n\n  if (e.key === 'ArrowRight') {\n    move(3, 0, 16, 4, -1, 1);\n  }\n\n  if (e.key === 'ArrowLeft') {\n    move(0, 3, 16, 4, 1, 1);\n  }\n\n  const currState = getFieldState();\n\n  if (checkWin()) {\n    toggleHidden(messageWin);\n  }\n\n  if (checkStateChange(prevState, currState)) {\n    fillNewCell();\n  }\n\n  if (!checkStateChange(prevState, currState) && !checkEmptyCells()) {\n    toggleHidden(messageLose);\n\n    document.removeEventListener('keydown', handleMove);\n  }\n};\n\nconst setScore = (value) => {\n  scoreSpan.textContent = value;\n};\n\nconst getFieldState = (cells = fieldCells) => {\n  return [...cells].map(cell => cell.textContent);\n};\n\nconst checkStateChange = (prev, curr) => {\n  for (let i = 0; i < prev.length; i++) {\n    if (prev[i] !== curr[i]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst checkEmptyCells = () => {\n  return [...fieldCells].some(el => {\n    return el.classList.length === 1;\n  });\n};\n\nconst checkWin = () => {\n  return [...fieldCells].some(el => el.textContent === 2048);\n};\n"]}